#!/usr/bin/env node

const app = require('../app');
const http = require('http');
var fs = require("fs");
const logger = require('log4js').getLogger('app');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort();
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 正常化一个端口号, 允许接收参数
 */
function normalizePort() {
  let argPort = parseInt(process.env.PORT, 10);
  if (!isNaN(argPort) && argPort >= 0) { // 允许使用的端口号
    return argPort;
  } else {
    return 3000;
  }
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(`port = ${port} requires elevated privileges`);
      process.exitCode = 1;
      break;
    case 'EADDRINUSE':
      logger.error(`port = ${port} is already in use`);
      process.exitCode = 1;
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.info(`Listening on ${bind}`);
}